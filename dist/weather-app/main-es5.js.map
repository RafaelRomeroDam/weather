{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/apixu.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/weather/weather.component.ts","webpack:///src/app/weather/weather.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","ApixuService","http","myApiKey","location","get","providedIn","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","WeatherComponent","formBuilder","apixuService","weatherSearchForm","group","formValues","getWeather","subscribe","data","weatherData","sendToAPIXU","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApixuService {\n  myApiKey: string = '814b1cc6f53ac582f374a2e1e342c786';\n\n  constructor(private http: HttpClient) { }\n\n  getWeather(location) {\n    return this.http.get(\n      'https://api.weatherstack.com/current?access_key='+ this.myApiKey +'&query=' + location\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { WeatherComponent } from './weather/weather.component';\n\nconst routes: Routes = [\n  { path: '', component: WeatherComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'weather-app';\n}\n","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { WeatherComponent } from './weather/weather.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ApixuService } from './apixu.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    WeatherComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  providers: [ApixuService,],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { ApixuService } from '../apixu.service';\n\n@Component({\n  selector: 'app-weather',\n  templateUrl: './weather.component.html',\n  styleUrls: ['./weather.component.css']\n})\nexport class WeatherComponent implements OnInit {\n  public weatherSearchForm: FormGroup;\n  public weatherData: any;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private apixuService: ApixuService) { }\n\n  ngOnInit(): void {\n    this.weatherSearchForm = this.formBuilder.group({\n      location: ['']\n    })\n  }\n\n  sendToAPIXU(formValues) {\n    this.apixuService.getWeather(formValues.location).subscribe(data => {\n      this.weatherData = data;\n    });\n  }\n\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-6\">\n            <h3 class=\"text-center my-4\">Search for Weather:</h3>\n            <form [formGroup]=\"weatherSearchForm\" (ngSubmit)=\"sendToAPIXU(weatherSearchForm.value)\">\n                <div class=\"form-group\">\n                    <input type=\"text\" \n                            class=\"form-control\" \n                            id=\"weatherLocation\" \n                            aria-describedby=\"weatherLocation\" \n                            placeholder=\"Please input a location\"\n                            formControlName=\"location\">\n                </div>\n                <div class=\"text-center\">\n                    <button type=\"submit\" \n                            class=\"btn btn-success btn-md\">Search for the weather</button>\n                </div>\n            </form>\n        </div>\n        <div class=\"col-md-6\">\n            <h3 class=\"text-center my-4\">Weather Details:</h3>\n            <div class=\"text-center\">Current weather conditions: \n                    <span *ngFor=\"let condition of weatherData?.current.weather_descriptions\">\n                        {{condition}}\n                    </span>\n             </div>\n            <p class=\"text-center\">Temperature in Degrees Celcius: {{weatherData?.current.temperature}}</p>\n            <p class=\"text-center\">Feels like in Degrees Celcius: {{weatherData?.current.feelslike}} </p>\n            <p class=\"text-center\">Location searched: {{weatherData?.location.name}} </p>\n        </div>\n    </div>\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}